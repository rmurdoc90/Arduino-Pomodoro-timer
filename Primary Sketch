/*
TODO LIST:
- Implement a use for the passive buzzer module
- Implement button to start the cycle
- see about implementng the goat scream.
- make function for time count downs

Last modifiied : 12/28/24
Project: Building a pomodoro timer for the desk that uses the screaming goat sound when the 25 min timer goes off
Tools/skills used:
- CAD
- Arduino
- electrical prototyping
- Github
- C/C++
- Arduino IDE
- 3d Printer

List for MVP:
- reset button for count, start/stop
- 25 min timer then 5 min down time
- After 4 cycles, do 25 min timer
- count for pomodoros
- built in clock of the time 
- LCD display
- display on top LCD what cycle currently in
*/

//Library imports
#include <LiquidCrystal_I2C.h>

void timerFunction(int, bool);

// Global Constants
const int pomoTimerMin = 24;
const int pomoBreakMin = 4;
const int standardDelay = 1000;

// Global Varibles
int count, flag; // Count for pomodoro along with display of count
bool startCycle, goButton; // Logic control for which timer to set next
char display1[3]; // Timer format varible
char display2[3];
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Create an LCD object. The parameters are (I2C address, width, height).
 

void setup() {
  // Initializing global variables 
  count = 0; // set the initial count to 0.
  flag = -1; // pomodoro count display flag
  startCycle = true;
  // goButton = false; // uncomment after setting up start button functionality

  //TODO

  //LCD initialization
  lcd.begin();
  lcd.backlight();   // Turn on the backlight
  lcd.setCursor(0, 0); // Set the cursor to the first column of the first row
  lcd.print("Pomodoro Timer"); // Opening message
  delay(2000);
  lcd.clear();
}

void loop() {

  if(count != flag){
    lcd.print("Pomo count: " + String(count));
    delay(standardDelay); // Remove after go button functionality added
    flag = count;
  }

  if(count==4){

    timerFunction(pomoTimerMin, true);
    count = 0;

  } else if (startCycle){

    timerFunction(pomoTimerMin, false);
    count++;

  } else {

    timerFunction(pomoBreakMin, true);
  
  }
}  

void timerFunction(int timer_, bool cycle_){
  lcd.clear();
    for(int i = timer_; i>=0;i--){
      for(int j = 59; j >= 0;j--){
        delay(standardDelay);
        lcd.clear();
        sprintf(display1, "%02d", i);
        sprintf(display2, "%02d", j);
        lcd.print("Time Left: " + String(display1) + ":" + String(display2));
      }
    }
    delay(standardDelay);
    lcd.clear();
    startCycle = cycle_;
}
